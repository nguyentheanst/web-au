{"version":3,"sources":["service/assertion.js","component/UserAuthen.js","component/UserRegister.js","service/registration.js","App.js","index.js"],"names":["assertionStart","data","axios","post","withCredentials","assertionFinish","UserAuthen","useState","name","setName","status","message","authenticationResult","setAuthenticationResult","authenticate","a","console","log","publicKeyCredentials","credentialOptions","challenge","base64url","toBuffer","allowCredentials","map","ac","obj","Object","assign","id","navigator","credentials","get","publicKey","cred","credential","rawId","encode","type","getClientExtensionsResults","clientExtensionResults","response","authenticatorData","clientDataJSON","signature","userHandle","value","onChange","e","preventDefault","target","onClick","UserRegister","deviceRegistrationState","setDeviceRegistrationState","createCredential","creationOptions","user","excludeCredentials","ec","create","then","attestationObject","headers","catch","err","registerAuthenticator","error","className","App","to","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7284e643.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const assertionStart = (data) => {\n  return axios.post(`/api/assertion/start?username=${data}`, null, {\n    withCredentials: true,\n  });\n};\n\nexport const assertionFinish = (data) => {\n  return axios.post(`/api/assertion/finish`, data, { withCredentials: true });\n};\n","import React, { useState } from \"react\";\nimport { assertionFinish, assertionStart } from \"../service/assertion\";\nimport base64url from \"base64url\";\n\nconst UserAuthen = () => {\n  const [name, setName] = useState(\"\");\n  const [authenticationResult, setAuthenticationResult] = useState({\n    status: 1,\n    message: \"\",\n  });\n\n  const authenticate = async () => {\n    try {\n      const { data } = await assertionStart(name);\n      console.log(data);\n      const publicKeyCredentials = data;\n      publicKeyCredentials.credentialOptions.challenge = base64url.toBuffer(\n        publicKeyCredentials.credentialOptions.challenge\n      );\n      if (publicKeyCredentials.credentialOptions.allowCredentials) {\n        publicKeyCredentials.credentialOptions.allowCredentials =\n          publicKeyCredentials.credentialOptions.allowCredentials.map((ac) => {\n            const obj = Object.assign({}, ac);\n            obj.id = base64url.toBuffer(obj.id);\n            return obj;\n          });\n      }\n\n      const cred = await navigator.credentials.get({\n        publicKey: publicKeyCredentials.credentialOptions,\n      });\n      const credential = {};\n      credential.id = cred.id;\n      credential.rawId = base64url.encode(cred.rawId);\n      credential.type = cred.type;\n\n      if (cred.getClientExtensionsResults) {\n        credential.clientExtensionResults = cred.getClientExtensionsResults();\n      } else {\n        credential.clientExtensionResults = {};\n      }\n\n      if (cred.response) {\n        credential.response = {\n          authenticatorData: base64url.encode(cred.response.authenticatorData),\n          clientDataJSON: base64url.encode(cred.response.clientDataJSON),\n          signature: base64url.encode(cred.response.signature),\n          userHandle: cred.response.userHandle\n            ? base64url.encode(cred.response.userHandle)\n            : null,\n        };\n      }\n\n      publicKeyCredentials.credential = credential;\n      await assertionFinish(publicKeyCredentials);\n\n      setAuthenticationResult({\n        status: 0,\n        message: \"Authentication Successful\",\n      });\n    } catch (e) {\n      setAuthenticationResult({ message: e.message, status: 1 });\n    }\n  };\n\n  const onAuthenticateClick = (e) => {\n    e.preventDefault();\n    setAuthenticationResult({ status: 1, message: \"\" });\n    authenticate();\n  };\n\n  const handleInputChange = (e) => {\n    e.preventDefault();\n    setName(e.target.value);\n  };\n\n  return (\n    <div>\n      <form>\n        <h3>Authentication</h3>\n        <div>\n          <label>Name</label>\n          <input value={name} type=\"text\" onChange={handleInputChange} />\n          <button onClick={onAuthenticateClick}>Authenticate</button>\n        </div>\n      </form>\n      <div>{authenticationResult.message}</div>\n    </div>\n  );\n};\n\nexport default UserAuthen;\n","import React, { useState } from \"react\";\nimport { registrationFinish, registrationStart } from \"../service/registration\";\nimport base64url from \"base64url\";\n\nconst UserRegister = () => {\n  const [deviceRegistrationState, setDeviceRegistrationState] = useState({\n    message: \"\",\n  });\n  const [name, setName] = useState(\"\");\n\n  const createCredential = (publicKeyCredentials) => {\n    publicKeyCredentials.creationOptions.challenge = base64url.toBuffer(\n      publicKeyCredentials.creationOptions.challenge\n    );\n\n    publicKeyCredentials.creationOptions.user.id = base64url.toBuffer(\n      publicKeyCredentials.creationOptions.user.id\n    );\n\n    if (publicKeyCredentials.creationOptions.excludeCredentials) {\n      publicKeyCredentials.creationOptions.excludeCredentials =\n        publicKeyCredentials.creationOptions.excludeCredentials.map((ec) => {\n          const obj = Object.assign({}, ec);\n          obj.id = base64url.toBuffer(obj.id);\n          return obj;\n        });\n    }\n\n    navigator.credentials\n      .create({ publicKey: publicKeyCredentials.creationOptions })\n      .then((cred) => {\n        const credential = {};\n        credential.id = cred.id;\n        credential.rawId = base64url.encode(cred.rawId);\n        credential.type = cred.type;\n\n        if (cred.getClientExtensionsResults) {\n          credential.clientExtensionResults = cred.getClientExtensionsResults();\n        } else {\n          credential.clientExtensionResults = {};\n        }\n\n        if (cred.response) {\n          const clientDataJSON = base64url.encode(cred.response.clientDataJSON);\n          const attestationObject = base64url.encode(\n            cred.response.attestationObject\n          );\n          credential.response = {\n            clientDataJSON,\n            attestationObject,\n          };\n        }\n\n        publicKeyCredentials.credential = credential;\n\n        registrationFinish(publicKeyCredentials)\n          .then(() => {\n            setDeviceRegistrationState({\n              status: 0,\n              message: \"Device successfully registered\",\n            });\n          })\n          .catch((err) => {\n            setDeviceRegistrationState({ status: 1, message: err.message });\n          });\n        // send attestation response and client extensions\n        // to the server to proceed with the registration\n        // of the credential\n      })\n      .catch((err) => {\n        setDeviceRegistrationState({ status: 1, message: err.message });\n      });\n  };\n\n  const registerAuthenticator = () => {\n    registrationStart(name)\n      .then((response) => {\n        createCredential(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n        if (err.response && err.response.data) {\n          setDeviceRegistrationState({\n            status: 1,\n            message: `${err.response.data.error}`,\n          });\n        } else {\n          setDeviceRegistrationState({\n            status: 1,\n            message: `${err.message}`,\n          });\n        }\n      });\n  };\n\n  const handleTextChange = (e) => {\n    e.preventDefault();\n    setName(e.target.value);\n  };\n\n  const onRegisterAuthenticatorClick = (e) => {\n    e.preventDefault();\n    registerAuthenticator();\n  };\n\n  return (\n    <form className=\"measure\" key=\"registration_authenticator_form\">\n      <h3>Register</h3>\n      <div key=\"ppp\">\n        <label>Name </label>\n        <input value={name} type=\"text\" onChange={handleTextChange} />\n        <button onClick={onRegisterAuthenticatorClick}>Register</button>\n      </div>\n      <div> {deviceRegistrationState.message}</div>\n    </form>\n  );\n};\n\nexport default UserRegister;\n","import axios from \"axios\";\n\nexport const registrationStart = (data) => {\n  return axios.post(`/api/registration/start?username=${data}`, null, {\n    withCredentials: true,\n  });\n};\n\nexport const registrationFinish = (data) => {\n  return axios.post(`/api/registration/finish`, data, {\n    withCredentials: true,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n","import \"./App.css\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport UserAuthen from \"./component/UserAuthen\";\nimport UserRegister from \"./component/UserRegister\";\n\nfunction App() {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/\">Register</Link>\n        </li>\n        <li>\n          <Link to=\"/auth\">Login</Link>\n        </li>\n      </ul>\n      <Switch>\n        <Route path=\"/auth\" component={UserAuthen} />\n        <Route exact path=\"/\" component={UserRegister} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}