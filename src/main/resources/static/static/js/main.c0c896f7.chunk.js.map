{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","username","setUsername","res","setRes","register","a","window","PublicKeyCredential","isUserVerifyingPlatformAuthenticatorAvailable","axios","post","data","create","publicKey","creationOptions","credential","payload","registrationId","then","response","catch","e","console","log","login","get","credentialOptions","assertionId","className","style","padding","value","onChange","target","onClick","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQA8EeA,MAzEf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsBF,mBAAS,IAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KAEMC,EAAQ,uCAAG,kCAAAC,EAAA,mEAETC,OAAOC,oBAFE,iCAGSD,OAAOC,oBAAoBC,gDAHpC,mDAKYC,IAAMC,KAAN,uCAA2CV,IALvD,uBAKFW,EALE,EAKFA,KALE,UAOgBC,YAAO,CAACC,UAAWF,EAAKG,kBAPxC,QAOHC,EAPG,OASHC,EAAU,CACdC,eAAgBN,EAAKM,eACrBF,cAGFN,IAAMC,KAAK,uBAAwBM,GAChCE,MAAK,SAACC,GAAD,OAAchB,EAAOgB,EAASR,SACnCS,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAhBjB,wBAkBTlB,EAAO,2BAlBE,gCAqBXA,EAAO,2BArBI,0DAwBT,KAAEgB,UAAY,KAAEA,SAASR,KAAMR,EAAO,KAAEgB,SAASR,MAChDR,EAAO,EAAD,IAzBE,0DAAH,qDA6BRqB,EAAK,uCAAG,kCAAAnB,EAAA,mEAENC,OAAOC,oBAFD,iCAGYD,OAAOC,oBAAoBC,gDAHvC,mDAKeC,IAAMC,KAAN,oCAAwCV,IALvD,uBAKCW,EALD,EAKCA,KALD,UAOmBc,YAAI,CAACZ,UAAWF,EAAKe,oBAPxC,QAOAX,EAPA,OASAC,EAAU,CACdW,YAAahB,EAAKgB,YAClBZ,cAGFN,IAAMC,KAAK,oBAAqBM,GAC7BE,MAAK,SAACC,GAAD,OAAchB,EAAOgB,EAASR,SACnCS,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAhBpB,wBAkBNlB,EAAO,2BAlBD,gCAqBRA,EAAO,2BArBC,0DAwBVmB,QAAQC,IAAR,MACI,KAAEJ,UAAY,KAAEA,SAASR,KAAMR,EAAO,KAAEgB,SAASR,MAChDR,EAAO,EAAD,IA1BD,0DAAH,qDA8BX,OACE,sBAAKyB,UAAU,MAAMC,MAAO,CAACC,QAAS,QAAtC,UACE,uBAAOC,MAAO/B,EAAUgC,SAAU,SAAAX,GAAC,OAAIpB,EAAYoB,EAAEY,OAAOF,UAC5D,wBAAQG,QAAS9B,EAAjB,sBACA,wBAAQ8B,QAASV,EAAjB,mBACCtB,GAAQ,8BAAMiC,KAAKC,UAAUlC,SC7DrBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c0c896f7.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nimport axios from \"axios\";\nimport {create, get} from \"@github/webauthn-json\";\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [res, setRes] = useState(\"\");\n\n  const register = async () => {\n    try {\n      if (window.PublicKeyCredential) {\n        const UVPAA = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\n        if (UVPAA) {\n          const {data} = await axios.post(`/registration/start?username=${username}`)\n\n          const credential = await create({publicKey: data.creationOptions});\n\n          const payload = {\n            registrationId: data.registrationId,\n            credential\n          };\n\n          axios.post('/registration/finish', payload)\n            .then((response) => setRes(response.data))\n            .catch(e => console.log(e));\n        } else {\n          setRes(\"Device does not support\")\n        }\n      } else {\n        setRes(\"Device does not support\")\n      }\n    } catch (e) {\n      if (e.response && e.response.data) setRes(e.response.data);\n      else setRes(e);\n    }\n  }\n\n  const login = async () => {\n    try {\n      if (window.PublicKeyCredential) {\n        const UVPAA = await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()\n        if (UVPAA) {\n          const {data} = await axios.post(`/assertion/start?username=${username}`)\n\n          const credential = await get({publicKey: data.credentialOptions});\n\n          const payload = {\n            assertionId: data.assertionId,\n            credential\n          };\n\n          axios.post('/assertion/finish', payload)\n            .then((response) => setRes(response.data))\n            .catch(e => console.log(e));\n        } else {\n          setRes(\"Device does not support\")\n        }\n      } else {\n        setRes(\"Device does not support\")\n      }\n    } catch (e) {\n      console.log(e);\n      if (e.response && e.response.data) setRes(e.response.data);\n      else setRes(e);\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{padding: '1rem'}}>\n      <input value={username} onChange={e => setUsername(e.target.value)}/>\n      <button onClick={register}>Register</button>\n      <button onClick={login}>Login</button>\n      {res && (<div>{JSON.stringify(res)}</div>)}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}